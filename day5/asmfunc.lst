     1                                  ; nasmfunc.asm
     2                                  ; TAB=4
     3                                  
     4                                  ;write_mem8: ; void write_mem8(int addr, int data)
     5                                  ;    MOV ECX, [ESP+4] ;[ESP+4]にaddrが入っているのでそれをECXに読み込む
     6                                  ;    MOV AL, [ESP+8]  ;[ESP+8]にdataが入っている
     7                                  ;    MOV [ECX], AL
     8                                  ;    RET
     9                                  section .text
    10                                          GLOBAL  io_hlt, io_cli, io_sti, io_stihlt
    11                                          global  io_in8, io_in16, io_in32
    12                                          global  io_out8, io_out16, io_out32
    13                                          global  io_load_eflags, io_store_eflags
    14                                          global  load_gdtr, load_idtr
    15                                  
    16                                  
    17                                  io_hlt:             ; void io_hlt(void);
    18 00000000 F4                              HLT
    19 00000001 C3                              RET
    20                                  
    21                                  io_cli:     ; void io_cli(void);
    22 00000002 FA                              cli
    23 00000003 C3                              ret
    24                                  
    25                                  io_sti:     ; void io_sti(void);
    26 00000004 FB                              sti
    27 00000005 C3                              ret
    28                                  
    29                                  io_stihlt:      ; void io_stihlt(void);
    30 00000006 FB                              sti
    31 00000007 F4                              hlt
    32 00000008 C3                              ret
    33                                  
    34                                  io_in8:     ; int io_in8(int port);
    35 00000009 8B542404                        mov     edx, [esp + 4]      ; port
    36 0000000D B800000000                      mov     eax, 0
    37 00000012 EC                              in      al, dx              ; 8
    38 00000013 C3                              ret
    39                                  
    40                                  io_in16:        ; int io_in16(int port);
    41 00000014 8B542404                        mov     edx, [esp + 4]      ; port
    42 00000018 B800000000                      mov     eax, 0
    43 0000001D 66ED                            in      ax, dx              ; 16
    44 0000001F C3                              ret
    45                                  
    46                                  in_in32:        ; int io_in16(int port);
    47 00000020 8B542404                        mov     edx, [esp + 4]      ; port
    48 00000024 ED                              in      eax, dx             ; 32
    49 00000025 C3                              ret
    50                                  
    51                                  io_out8:        ; void io_to_in_out8;
    52 00000026 8B542404                        mov     edx, [esp + 4]      ; port
    53 0000002A 8A442408                        mov     al, [esp + 8]       ; data
    54 0000002E EE                              out     dx, al              ; 8
    55 0000002F C3                              ret
    56                                  
    57                                  io_out16:       ; void io_to_in_out16;
    58 00000030 8B542404                        mov     edx, [esp + 4]      ; port
    59 00000034 8B442408                        mov     eax, [esp + 8]      ; data
    60 00000038 66EF                            out     dx, ax              ; 16
    61 0000003A C3                              ret
    62                                  
    63                                  io_out32:       ; void io_to_in_out32;
    64 0000003B 8B542404                        mov     edx, [esp + 4]      ; port
    65 0000003F 8B442408                        mov     eax, [esp + 8]      ; data
    66 00000043 EF                              out     dx, eax             ; 32
    67 00000044 C3                              ret
    68                                  
    69                                  io_load_eflags:     ; int io_load_eflags(void);
    70 00000045 9C                              pushfd      ; push eflags double-word
    71 00000046 58                              pop     eax
    72 00000047 C3                              ret
    73                                  
    74                                  io_store_eflags:        ; void io_store_eflags(int eflags);
    75 00000048 8B442404                        mov     eax, [esp + 4]
    76 0000004C 50                              push    eax
    77 0000004D 9D                              popfd       ; pup eflags double-word
    78 0000004E C3                              ret
    79                                  
    80                                  load_gdtr:        ; void load_gdtr(int limit, int addr)
    81 0000004F 668B442404                      mov     ax, [esp + 4]       ; limit
    82 00000054 6689442406                      mov     [esp + 6], ax
    83 00000059 0F01542406                      lgdt    [esp + 6]
    84 0000005E C3                              ret
    85                                   
    86                                  load_idtr:        ; void load_idtr(int limit, int addr)
    87 0000005F 668B442404                      mov     ax, [esp + 4]       ; limit
    88 00000064 6689442406                      mov     [esp + 6], ax
    89 00000069 0F015C2406                      lidt    [esp + 6]
    90 0000006E C3                              ret
    91                                  
